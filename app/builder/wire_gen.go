// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package builder

import (
	"github.com/arabian9ts/sweeTest/app/interface/controllers"
	"github.com/arabian9ts/sweeTest/app/interface/database"
	"github.com/arabian9ts/sweeTest/app/interface/presenter"
	"github.com/arabian9ts/sweeTest/app/usecase/interactor"
	"github.com/arabian9ts/sweeTest/app/usecase/repository"
	"github.com/arabian9ts/sweeTest/infrastructure"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeUserRepository() (repository.UserRepository, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	userRepository, err := database.NewUserRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	return userRepository, nil
}

func InitializeLectureRepository() (repository.LectureRepository, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	lectureRepository, err := database.NewLectureRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	return lectureRepository, nil
}

func InitializeRootController() (*controllers.RootController, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	userRepository, err := database.NewUserRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	userOutput := presenter.NewUserPresenter()
	studentsController, err := controllers.NewStudentsController(userRepository, userOutput)
	if err != nil {
		return nil, err
	}
	assistantsController, err := controllers.NewAssistantsController(userRepository, userOutput)
	if err != nil {
		return nil, err
	}
	teachersController, err := controllers.NewTeachersController(userRepository, userOutput)
	if err != nil {
		return nil, err
	}
	lectureRepository, err := database.NewLectureRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	lectureOutput := presenter.NewLecturePresenter()
	lecturesController, err := controllers.NewLecturesController(lectureRepository, lectureOutput)
	if err != nil {
		return nil, err
	}
	taskRepository, err := database.NewTaskRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	taskOutput := presenter.NewTaskPresenter()
	tasksController, err := controllers.NewTasksController(taskRepository, taskOutput)
	if err != nil {
		return nil, err
	}
	rootController, err := controllers.NewRootController(studentsController, assistantsController, teachersController, lecturesController, tasksController)
	if err != nil {
		return nil, err
	}
	return rootController, nil
}

func InitializeStudentsController() (*controllers.StudentsController, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	userRepository, err := database.NewUserRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	userOutput := presenter.NewUserPresenter()
	studentsController, err := controllers.NewStudentsController(userRepository, userOutput)
	if err != nil {
		return nil, err
	}
	return studentsController, nil
}

func InitializeAssistantsController() (*controllers.AssistantsController, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	userRepository, err := database.NewUserRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	userOutput := presenter.NewUserPresenter()
	assistantsController, err := controllers.NewAssistantsController(userRepository, userOutput)
	if err != nil {
		return nil, err
	}
	return assistantsController, nil
}

func InitializeTeachersController() (*controllers.TeachersController, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	userRepository, err := database.NewUserRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	userOutput := presenter.NewUserPresenter()
	teachersController, err := controllers.NewTeachersController(userRepository, userOutput)
	if err != nil {
		return nil, err
	}
	return teachersController, nil
}

func InitializeLecturesController() (*controllers.LecturesController, error) {
	sqlHandler := infrastructure.NewSqlHandler()
	lectureRepository, err := database.NewLectureRepository(sqlHandler)
	if err != nil {
		return nil, err
	}
	lectureOutput := presenter.NewLecturePresenter()
	lecturesController, err := controllers.NewLecturesController(lectureRepository, lectureOutput)
	if err != nil {
		return nil, err
	}
	return lecturesController, nil
}

// wire.go:

var repositorySet = wire.NewSet(infrastructure.NewSqlHandler, database.NewUserRepository, database.NewLectureRepository)

var controllerSet = wire.NewSet(infrastructure.NewSqlHandler, database.NewUserRepository, database.NewLectureRepository, database.NewTaskRepository, controllers.NewStudentsController, controllers.NewAssistantsController, controllers.NewTeachersController, controllers.NewLecturesController, controllers.NewRootController, controllers.NewTasksController, interactor.NewUserInteractor, presenter.NewUserPresenter, presenter.NewLecturePresenter, presenter.NewTaskPresenter)
